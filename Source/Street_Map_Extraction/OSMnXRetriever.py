import osmnx as ox
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import os
import pandas as pd


class OSMnXWalkCityRetriever:
    '''
    Class used as an interface to retrieve and export data from OSMnX.
    '''

    def __init__(self):
        #Colors for visualization
        self.nodeColor = "#2ac1db"
        self.edgeColor = "#e38d3d"
        self.backgroundColor = "#ffffff"
        
        #This class focuses on segments that can be used by pedestrians
        self.networkType = "walk"

        self.nodeSize = 1
        self.edgeSize = 1

    def setNodeSize(self, nodeSize):
        self.nodeSize = nodeSize

    def setEdgeSize(self, edgeSize):
        self.edgeSize = edgeSize
        
    
    def getGraphFromCoordinates(self, latitude, longitude, searchRadius, simplify = True):
        '''
        Returns NetworkX graph of the city walk segments centered at (latitude, longitude)
        and within a search radius searchRadius.
        '''

        graph = ox.graph.graph_from_point((latitude, longitude), dist = searchRadius, dist_type = 'bbox', network_type = self.networkType, simplify = simplify)
        return graph
    
    def getGraphFromPolygon(self, polygon, simplify = True):
        '''
        Gets the graph from a shapely polygon object
        '''
        graph = ox.graph.graph_from_polygon(polygon, simplify = simplify, network_type = self.networkType)
        return graph
        


    def getGraphFromCity(self, country, state, city, simplify = True):
        '''
        Provides a graph for a specified city. E.g. ("MÃ©xico", "Nuevo Leon", "Monterrey")
        '''
        place = {"city": city, "state": state, "country":country}
        graph = ox.graph.graph_from_place(place, network_type = self.networkType, truncate_by_edge = True, simplify = simplify)

        return graph

    def drawGraph(self, graph, exportPath = None):
        '''
        Draws the graph given as input to the function. If exportPath is specified the plot will be saved in the specified location.
        '''
        
        if(exportPath != None):
            fig, ax = ox.plot_graph(graph, node_color = self.nodeColor, edge_color = self.edgeColor, bgcolor = self.backgroundColor, node_size = self.nodeSize, edge_linewidth = self.edgeSize)
            fig.savefig(exportPath, bbox_inches = "tight")

        else:
            fig, ax = ox.plot_graph(graph, node_color = self.nodeColor, edge_color = self.edgeColor, bgcolor = self.backgroundColor, node_size = self.nodeSize, edge_linewidth = self.edgeSize)

    def cleanDataFrame(self, dataFrame):
        '''
        Data frames generated by OSMnX contain things like lists, which cannot be exported to geojson. In such cases to preserve the information 
        we need to convert the list to a string before saving. 

        This method carries out such cleaning operation.
        '''
        keys = dataFrame.keys()
        element = -1
        for i in range(0,len(keys)):
            key = keys[i]
            subKeys = dataFrame[key].keys()
            for j in range(0,len(subKeys)):
                subKey = subKeys[j]
                if(type(dataFrame[key][subKey]) is list):
                    dataFrame.loc[subKey, key] = str(dataFrame.loc[subKey, key])
        return dataFrame

    def getDataFrame(self, graph):
        dataFrameNodes, dataFrameEdges = ox.graph_to_gdfs(graph)
        dataFrameEdges['geometry'] = dataFrameEdges.normalize()
        dataFrameEdges = dataFrameEdges.drop_duplicates('geometry')
        newGDF = dataFrameEdges[['name','length', 'geometry']]
        newGDF = self.cleanDataFrame(newGDF)
        return newGDF

    def exportGeoJSON(self, graph, path):
        '''
        Exports a geojson of the graph to the specified path. 
        '''
    
        dataFrameNodes, dataFrameEdges = ox.graph_to_gdfs(graph)
        dataFrameEdges['geometry'] = dataFrameEdges.normalize()
        dataFrameEdges = dataFrameEdges.drop_duplicates('geometry')

        if 'name' not in dataFrameEdges.columns or pd.isnull(dataFrameEdges['name']).all():
            unnamedCounter = 1

            def assignIndexedName(row):
                nonlocal unnamedCounter
                row['name'] = f"Unnamed_{unnamedCounter}"
                unnamedCounter += 1
                return row

            dataFrameEdges = dataFrameEdges.apply(assignIndexedName, axis=1)

        # Continue with exporting the GeoDataFrame
        newGDF = dataFrameEdges[['name', 'length', 'geometry']]
        newGDF = self.cleanDataFrame(newGDF)
        splitPath = path.split("/")
        nSubs = len(splitPath)
        parentPath = ""
        for i in range(0, nSubs - 1):
            parentPath = parentPath + splitPath[i] + "/"

        if not os.path.exists(parentPath):
            os.mkdir(parentPath)

        newGDF.to_file(path, driver='GeoJSON')
        print('Exported Geojson')

        


    







        


